{"version":3,"sources":["index.min.js"],"names":["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","A","B","C","D","E","F","H","I","J","K"],"mappings":"SAASA,EAAIC,EAAMC,UACRD,EAAOC,SAGZC,eACIC,EAAMJ,eACNK,4BACAC,4BAAoCF,6BAA+BC,gBAC7DC,KAEhBH,8BAEMI,aACIC,6BACAC,6HAMeD,+DAEKC,mCACLA,kCACGA,0EAG5BF,aAESG,gEAISC,uBAEFA,SACMC,GAASJ,SAAcJ,cACrBQ,eAEFC,2CACCA,gBAOvBH,SACUE,wBACmBA,YAElBC,yBACmBA,EAAMP,eAG3BQ,EAAmBC,aACbC,KAAOD,MACVA,iBAAmBC,cACRD,EAAIC,eAEXF,EAAmBC,EAAIC,sBAGXA,EAAKD,EAAIC,cAM/BC,kHAWNH,EAAmBG,SAEbC,mBAGAC,oCAEAC,EAAOF,sBACPG,EAAQH,mBACRI,EAAMJ,kBACNK,EAAOL,mBACPM,EAASN,qBACTO,EAASP,qBACTQ,EAAaR,uBACbS,EAAmBT,6BACnBU,EAAmBV,uBAEzBA,UAAoBA,eAGpBA,WAAqBA,sBACfW,4BACAC,yBAEFD,EAAQC,qDAINC,GACFvB,4BAIAJ,aAGII,eAAuBJ,GAAQ2B,mDAI3B3B,4BAGII,EAAMJ,QACXI,EAAOA,OACPJ,EAAMA,oDAI2BI,mBAAsBJ,wBAK1D4B,yBAGNA,mBAGIC,WAEAC,qCACAC,2CACMF","file":"index.min.js","sourcesContent":["function sum(var1, var2) {\n    return var1 + var2\n}\n//this is test comments\nconst info = (name) => {\n    const age = sum(10, 14)\n    const profession = \"Software Engineer\"\n    const message = `Hello ${name}, you are ${age} years old and you are a ${profession}`\n    console.log(message)\n}\ninfo(\"Rakesh Kumar Singh\")\n\nconst helper = () => {\n    const name = \"Rakesh Kumar Singh\"\n    const address = {\n        streetNo: \"4-53\",\n        city: \"HYD\",\n        country: \"IND\"\n    }\n    console.log(\"*******************************************\")\n    console.log(`Hello ${name}!`)\n    console.log(`Address Details`)\n    console.log(`Street No: ${address.streetNo}`)\n    console.log(`City: ${address.city}`)\n    console.log(`Country: ${address.country}`)\n    console.log(\"*******************************************\")\n}\nhelper()\n// Simulated asynchronous function that returns a promise\nfunction fetchData() {\n    return new Promise((resolve, reject) => {\n        // Simulate a delay (e.g., an API request)\n        setTimeout(() => {\n            const success = Math.random() > 0.5; // Simulate success or failure\n\n            if (success) {\n                const data = { name: 'John', age: 30 };\n                resolve(data); // Fulfill the promise with data\n            } else {\n                const error = new Error('Failed to fetch data');\n                reject(error); // Reject the promise with an error\n            }\n        }, 1000); // Simulate a 1-second delay\n    });\n}\n\n// Using the fetchData function with promises\nfetchData()\n    .then(data => {\n        console.log('Data:', data);\n    })\n    .catch(error => {\n        console.log('Error:', error.message);\n    });\n\nfunction recursiveTraversal(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key)) {\n            if (typeof obj[key] === 'object') {\n                // If the value is an object, recursively traverse it\n                recursiveTraversal(obj[key]);\n            } else {\n                // If the value is not an object, you can do something with it\n                console.log(key, obj[key]);\n            }\n        }\n    }\n}\n\nconst nestedObject = {\n    key1: 'value1',\n    key2: {\n        nestedKey1: 'nestedValue1',\n        nestedKey2: {\n            deeplyNestedKey: 'deeplyNestedValue',\n        },\n    },\n    key3: 'value3',\n};\n\nrecursiveTraversal(nestedObject);\n// Create a Date object representing the current date and time\nconst currentDate = new Date();\n\n// Create a Date object for a specific date and time (year, month, day, hour, minute, second)\nconst specificDate = new Date(2023, 0, 15, 10, 30, 0); // January 15, 2023, 10:30:00 AM\n\nconst year = currentDate.getFullYear();\nconst month = currentDate.getMonth(); // Note: Months are 0-based (0 = January, 11 = December)\nconst day = currentDate.getDate();\nconst hour = currentDate.getHours();\nconst minute = currentDate.getMinutes();\nconst second = currentDate.getSeconds();\nconst dateString = currentDate.toDateString(); // \"Fri Sep 23 2023\"\nconst localeDateString = currentDate.toLocaleDateString(); // Depends on the user's locale\nconst localeTimeString = currentDate.toLocaleTimeString(); // Depends on the user's locale\n// Adding 3 days to the current date\ncurrentDate.setDate(currentDate.getDate() + 3);\n\n// Subtracting 1 hour from the current date\ncurrentDate.setHours(currentDate.getHours() - 1);\nconst date1 = new Date(2023, 0, 15);\nconst date2 = new Date(2023, 0, 20);\n\nif (date1 < date2) {\n    console.log(\"date1 is earlier than date2\");\n}\n\nconst person = {\n    name: {\n        first: \"John\",\n        last: \"Doe\",\n    },\n    age: 30,\n};\n\nconst { name: { first, last }, age } = person;\n\nconsole.log(first); // \"John\"\nconsole.log(last); // \"Doe\"\nconsole.log(age); // 30\n\nclass Person {\n    constructor(name, age) {\n      this.name = name;\n      this.age = age;\n    }\n  \n    sayHello() {\n      console.log(`Hello, my name is ${this.name} and I am ${this.age} years old.`);\n    }\n  }\n  \n  // Creating an object (instance) of the class\n  const person1 = new Person('Alice', 30);\n  \n  // Calling a method on the object\n  person1.sayHello(); // Output: \"Hello, my name is Alice and I am 30 years old.\"\n\n  // Create an array to store the unique variable names\nconst variableNames = [];\n\nconst lowercaseLetters = 'abcdefghijklmnopqrstuvwxyz';\nconst uppercaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\nconsole.log(variableNames);\n"]}